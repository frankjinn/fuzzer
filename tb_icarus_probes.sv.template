// Copyright 2024 Flavien Solt, ETH Zurich.
// Licensed under the General Public License, Version 3.0, see LICENSE for details.
// SPDX-License-Identifier: GPL-3.0-only

TEMPLATE_FULL_RANDOM
TEMPLATE_DO_TRACE

module testbench;

  bit [31:0] in_data_words [TEMPLATE_IN_DATA_WIDTH / 32];
  bit [31:0] out_data_words [TEMPLATE_OUT_DATA_WIDTH / 32];
  bit [31:0] probe_data_words [TEMPLATE_PROBE_DATA_WIDTH / 32];

  int fd;
  int in_buf;

  bit [63:0] cumulated_output;

  // Instantiate the design under test (DUT)
  bit [TEMPLATE_IN_DATA_WIDTH-1:0]  in_data;
  bit [TEMPLATE_OUT_DATA_WIDTH-1:0] out_data;
  bit [TEMPLATE_PROBE_DATA_WIDTH-1:0] probe_data;
  top dut(in_data, out_data, probe_data);

  always_comb begin
    for (int in_word_id = 0; in_word_id < TEMPLATE_IN_DATA_WIDTH / 32; in_word_id++) begin : reset_generator
      in_data[32*in_word_id +: 32] = in_data_words[in_word_id];
    end
    for (int out_word_id = 0; out_word_id < TEMPLATE_OUT_DATA_WIDTH / 32; out_word_id++) begin : reset_generator
      out_data_words[out_word_id] = out_data[32*out_word_id +: 32];
    end
    for (int probe_word_id = 0; probe_word_id < TEMPLATE_PROBE_DATA_WIDTH / 32; probe_word_id++) begin : reset_generator
      probe_data_words[probe_word_id] = probe_data[32*probe_word_id +: 32];
    end
  end

  // Stimulus generation
  initial begin
    cumulated_output = 0;

    fd = $fopen("TEMPLATE_PATH_TO_RANDOM_INPUTS_FILE", "r");
    if (fd == 0) begin
      $display("Error: could not open file `inputs.txt`.");
      $finish;
    end

`ifdef DO_TRACE
    $dumpfile("TEMPLATE_PATH_TO_DUMP_FILE");
    $dumpvars(0,dut);
`endif

    // Implemented in VPI-C. Starts the timer.
    // $wallclocktime_start;

    for (int step_id = 0; step_id < TEMPLATE_NUM_STEPS; step_id++) begin
`ifdef FULL_RANDOM
      for (int word_id = 0; word_id < TEMPLATE_IN_DATA_WIDTH / 32; word_id++) begin
        $fscanf(fd, "%d", in_buf);
        in_data_words[word_id] = in_buf;
      end
`else
      $fscanf(fd, "%d", in_buf);
      in_data_words[0] = in_buf;
      for (int word_id = 1; word_id < TEMPLATE_IN_DATA_WIDTH / 32; word_id++) begin
        in_data_words[word_id] = in_data_words[0] + word_id;
        // if (step_id == 0) begin
        //   $display("word_id: %d, value: %d", word_id, in_data_words[word_id]);
        // end
      end
`endif
      #1;

      // Cumulate the outputs
      for (int word_id = 0; word_id < TEMPLATE_OUT_DATA_WIDTH / 32; word_id++) begin
        cumulated_output += out_data_words[word_id];
      end

      // Display the probe outputs
      for (int word_id = 0; word_id < TEMPLATE_PROBE_DATA_WIDTH / 32; word_id++) begin
        $display("Probe step %d word %d : %d", step_id, word_id, probe_data_words[word_id]);
      end
    end

    $display("Output signature: %d.", cumulated_output);
    // Implemented in VPI-C. Displays the elapsed time.
    // $wallclocktime_end;
  end

endmodule
